// Generated by dts-bundle-generator v9.5.1

import { IBaseDef, ICore, Layout, Modules, ModulesEvent } from '@boardmeister/antetype-core';
import { Herald, ISubscriber, Subscriptions } from '@boardmeister/herald';
import { IInjectable } from '@boardmeister/marshal';
import { Minstrel } from '@boardmeister/minstrel';

interface IIterableWeakMap<T extends object, P> {
	get: (key: T) => P | undefined;
	set: (key: T, value: P) => IIterableWeakMap<T, P>;
	delete: (key: T) => boolean;
	first: () => P | null;
	last: () => P | null;
	firstKey: () => T | null;
	lastKey: () => T | null;
	has: (key: T) => boolean;
	keys: () => T[];
	values: () => P[];
	empty: () => boolean;
	reset: () => void;
	clone: () => IIterableWeakMap<T, P>;
	[Symbol.toStringTag]: string;
}
type Selected = IIterableWeakMap<IBaseDef, true>;
export interface IEventDown {
	x: number;
	y: number;
	layers: Layout;
	shiftKey: boolean;
	ctrlKey: boolean;
}
export interface IEventHover {
	layer: IBaseDef | null;
	deep: IBaseDef | null;
	x: number;
	y: number;
	mY: number;
	mX: number;
}
export interface IEvent {
	isDown: boolean;
	wasMoved: boolean;
	selected: Selected;
	down: IEventDown;
	hover: IEventHover;
}
interface BaseEvent {
	origin: MouseEvent;
	target: IEvent;
}
export type DownEvent = BaseEvent;
export type UpEvent = BaseEvent;
export type MoveEvent = BaseEvent;
export interface SlipEvent extends BaseEvent {
	from: IBaseDef | null;
	to: IBaseDef | null;
}
export interface IRequiredModules extends Modules {
	core: ICore;
}
export interface PositionEvent {
	x: number;
	y: number;
}
export interface CalcEvent {
	values: Record<string, number>;
}
export interface IResizedEvent {
	layout: Layout;
	success: boolean;
}
export type ResizedEvent = CustomEvent<IResizedEvent>;
declare enum Event$1 {
	CALC = "antetype.cursor.calc",
	POSITION = "antetype.cursor.position",
	DOWN = "antetype.cursor.on.down",
	UP = "antetype.cursor.on.up",
	MOVE = "antetype.cursor.on.move",
	SLIP = "antetype.cursor.on.slip",
	RESIZED = "antetype.cursor.on.resized"
}
export interface ICursor {
	selected: IIterableWeakMap<IBaseDef, true>;
	showSelected: () => void;
	isSelected: (needle: IBaseDef) => IBaseDef | false;
	drawSelection: (layer: IBaseDef) => void;
	resetSeeThroughStackMap: VoidFunction;
}
export interface ICursorParams {
	canvas: HTMLCanvasElement | null;
	modules: IRequiredModules;
	herald: Herald;
}
export interface ICursorSettings {
	draw?: {
		disabled?: boolean;
	};
	select?: {
		disabled?: boolean;
	};
	detect?: {
		disabled?: boolean;
	};
	resize?: {
		disabled?: boolean;
		buffer?: number;
	};
	delete?: {
		disabled?: boolean;
	};
}
export interface IInjected extends Record<string, object> {
	minstrel: Minstrel;
	herald: Herald;
}
export declare class AntetypeCursor {
	#private;
	static inject: Record<string, string>;
	inject(injections: IInjected): void;
	register(event: CustomEvent<ModulesEvent>): Promise<void>;
	static subscriptions: Subscriptions;
}
declare const EnAntetypeCursor: IInjectable<IInjected> & ISubscriber;

export {
	EnAntetypeCursor as default,
	Event$1 as Event,
};

export {};
